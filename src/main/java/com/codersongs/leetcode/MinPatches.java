package com.codersongs.leetcode;

/**
 * 给定一个已排序的正整数数组 nums，和一个正整数 n 。从 [1, n] 区间内选取任意个数字补充到 nums 中，使得 [1, n] 区间内的任何数字都可以用 nums 中某几个数字的和来表示。请输出满足上述要求的最少需要补充的数字个数。

 示例 1:

 输入: nums = [1,3], n = 6
 输出: 1
 解释:
 根据 nums 里现有的组合 [1], [3], [1,3]，可以得出 1, 3, 4。
 现在如果我们将 2 添加到 nums 中， 组合变为: [1], [2], [3], [1,3], [2,3], [1,2,3]。
 其和可以表示数字 1, 2, 3, 4, 5, 6，能够覆盖 [1, 6] 区间里所有的数。
 所以我们最少需要添加一个数字。

 示例 2:

 输入: nums = [1,5,10], n = 20
 输出: 2
 解释: 我们需要添加 [2, 4]。

 示例 3:

 输入: nums = [1,2,2], n = 5
 输出: 0


 * @author wusongsong
 * @date 2019/5/23
 */
public class MinPatches {
    
    public static void main(String[] args) {
//        System.out.println(minPatches(new int[]{1,2,31,33}, 2147483647));
        System.out.println(minPatches(new int[]{1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,15,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,30,30,30,30,30,31,31,31,31,31,31,32,32,32,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,36,36,37,37,37,37,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,40,40,41,41,42,42,42,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,52,52,52,52,53,53,53,53,53,54,54,54,54,54,54,55,55,55,55,55,55,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,59,59,59,59,59,59,59,60,60,60,60,60,61,61,61,61,61,62,62,62,62,62,62,63,63,63,63,64,65,65,65,65,65,65,65,66,66,66,66,66,66,66,67,67,67,67,68,68,68,68,69,69,69,69,69,69,69,70,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,73,73,73,73,73,73,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,77,77,77,77,77,77,78,78,78,78,78,78,78,78,79,79,79,79,79,80,80,80,81,81,81,81,81,81,82,82,82,82,82,82,82,82,83,83,83,83,83,84,84,84,84,84,84,85,85,85,85,85,86,86,86,86,86,87,87,87,87,87,87,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,91,91,91,91,91,91,91,92,92,92,92,92,93,93,93,93,93,93,93,94,94,95,95,95,95,95,95,95,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,99,99,99,99,99,99,100,100,100,100,100}, 91863));
        System.out.println(minPatches(new int[]{1,2,10}, 5));
        System.out.println(minPatches(new int[]{1,5,10}, 20));
//        System.out.println(Math.log(9)/Math.log(2));
    }

    /**
     *log(n)
     * @param nums
     * @param n
     * @return
     */
    public static int minPatches(int[] nums, int n) {
        long i = 1L;
        int j = 0, count = 0;
        while (i <= n){
            if (j < nums.length && nums[j] <= i){
                i += nums[j++];
                continue;
            }
            i += i;
            count ++;
        }
        return count;
    }
}
